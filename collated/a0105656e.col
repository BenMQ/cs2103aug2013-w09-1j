//@author: a0105656e



	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManager.java
	 */

	/**
	 * Load an ArrayList of tasks into memory. This method should be called upon
	 * launch after the storage unit has read the stored item from disk. This
	 * action overrides any exiting tasks stored in memory
	 * 
	 * @param tasks
	 *            ArrayList of tasks that is provided by the storage unit
	 */
	public void preloadTasks(ArrayList<Task> tasks) {
		this.tasks = tasks;
	}

	
	public void relaunch(String taskFileName, String historyFileName) {
		StorageHandler.resetAll(Constants.FILE_NAME, Constants.HISTORY_NAME);
		tasks = new ArrayList<Task>();
		storage = StorageHandler.getStorageHandler(Constants.FILE_NAME, Constants.HISTORY_NAME);
		try {
			isReloaded = storage.prepareFile(tasks);
		} catch (WrongTaskDescriptionStringException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		TaskManagerUtils.updateAllIds(tasks);
		try {
			taskManager = new TaskManager(taskFileName, historyFileName);
			GUI.print_add("Files rebuilt.", GUIConstants.COLOR_CODE_RED);

		} catch (Exception e) {
			GUI.print_add("Files rebuiling failed.",
					GUIConstants.COLOR_CODE_RED);

			e.printStackTrace();
		}
	}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManager.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManager.java
	 */

	/**
	 * If history does not exist, throw Exception
	 * 
	 * @return
	 */
	public void undo() {
		try {
			try {
				tasks = storage.undo();
			} catch (WrongTaskDescriptionStringException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			GUI.print_add(Constants.MESSAGE_UNDO, GUIConstants.COLOR_CODE_BLUE);
		} catch (FileNotFoundException e) {
			storage.rebuildHistory();
			GUI.print_add(Constants.MESSAGE_HISTORY_LOAD_ERROR,
					GUIConstants.COLOR_CODE_RED);
		} catch (NoHistoryException e) {
			GUI.print_add(Constants.MESSAGE_LAST_HISTORY,
					GUIConstants.COLOR_CODE_BLUE);
		}
		TaskManagerUtils.updateAllIds(tasks);
	}

	/**
	 * 
	 * @return
	 * @throws IOException
	 */
	public ArrayList<Task> saveTasks() throws IOException {
		storage.save(false);
		return tasks;
	}

	/**
	 * If no redo provision exists in history, throw Exception
	 * 
	 * @return
	 */
	public void redo() {
		try {
			tasks = storage.redo();
			GUI.print_add(Constants.MESSAGE_REDO, GUIConstants.COLOR_CODE_BLUE);
		} catch (FileNotFoundException e) {
			storage.rebuildHistory();
			GUI.print_add(Constants.MESSAGE_HISTORY_LOAD_ERROR,
					GUIConstants.COLOR_CODE_RED);
		} catch (NoHistoryException e) {
			GUI.print_add(Constants.MESSAGE_LAST_HISTORY,
					GUIConstants.COLOR_CODE_BLUE);
		} catch (WrongTaskDescriptionStringException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		TaskManagerUtils.updateAllIds(tasks);
	}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManager.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManagerUtils.java
	 */

	/**
	 * Transfer all tasks from one ArrayList to another ArrayList
	 **/
	public static void transferTasks(ArrayList<Task> from, ArrayList<Task> to) {
		to.clear();
		for (Task t : from) {
			to.add(t);
		}
	}

}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TaskManagerUtils.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TimedTask.java
	 */

	// To be used to store in .txt
	public String toStringForFile() {
		int bound = startTime.toString().indexOf(":");
		String returnedStartTime = this.startTime.toString().substring(0,
				bound + 3);
		int bound2 = endTime.toString().indexOf(":");
		String returnedEndTime = this.endTime.toString()
				.substring(0, bound + 3);
		return "TIMED" + "#" + description + "#" + returnedStartTime + " to "
				+ returnedEndTime + "#" + isComplete;
	}
	
	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\logic\TimedTask.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\StorageHandler.java
	 */

package sg.edu.nus.cs2103.sudo.storage;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import org.joda.time.DateTime;

import sg.edu.nus.cs2103.sudo.COMMAND_TYPE;
import sg.edu.nus.cs2103.sudo.Constants;
import sg.edu.nus.cs2103.sudo.exceptions.NoHistoryException;
import sg.edu.nus.cs2103.sudo.exceptions.WrongTaskDescriptionStringException;
import sg.edu.nus.cs2103.sudo.logic.DeadlineTask;
import sg.edu.nus.cs2103.sudo.logic.FloatingTask;
import sg.edu.nus.cs2103.sudo.logic.InputParser;
import sg.edu.nus.cs2103.sudo.logic.Task;
import sg.edu.nus.cs2103.sudo.logic.TimedTask;
import sg.edu.nus.cs2103.ui.GUI;

public class StorageHandler {
	/**
	 * This StorageHandler class is responsible for:
	 * 1.Open and read file from the disk, and write changes to disk.
	 * 2.Keep track of the history, capture every change and save the undoable history records into the file.
	 * 3.Provide undo/redo functions when running
	 */
	private static StorageHandler storageHandler;
	private String fileName;
	public ArrayList<ArrayList<String>> history;
	public ArrayList<ArrayList<String>> history_redo;
	private ArrayList<Task> tasks;
	private String historyName;

	/**
	 * (This is a singleton class)
	 * Build a StorageHandler.
	 * @param  fileName
	 */
	private StorageHandler(String fileName, String historyName) {
		this.fileName = fileName;
		this.historyName = historyName;
		initializeHistory();
	}
	
	/**
	 * Give a StorageHandler.
	 * @param fileName
	 */
	public static StorageHandler getStorageHandler(String fileName, String historyName) {
		if (storageHandler == null) {
			storageHandler = new StorageHandler(fileName, historyName);
		}
		return storageHandler;
	}
	
	/**
	 * reset the StorageHandler but keep the files
	 */
	public static void resetStorageHandler() {
			storageHandler.history.clear();
			storageHandler.history_redo.clear();
			storageHandler = null;
	}
	
	/**
	 * reset the StorageHandler and clear all files.
	 */
	public static void resetAll(String fileName, String historyName) {
		File file = new File(fileName);
		File historyFile = new File(historyName);
		if (file.exists()) {
			file.delete();
			historyFile.delete();
		}
		storageHandler = null;
}
	
	/**
	 * initialize history files and ArrayLists but keep the history file on disk
	 */
	private void initializeHistory(){
		history_redo = new ArrayList<ArrayList<String>>();
		history = new ArrayList<ArrayList<String>>();
		//Add a null task list to the bottom if it is first time started
		ArrayList<String> nullTasks = new ArrayList<String>();
		history.add(nullTasks);
	}
	
	/**
	 * clear history files and overwrite the history record on disk
	 */
	public void rebuildHistory(){
		initializeHistory();
		saveHistory();
	}
	/**
	 * read history file from the disk
	 * @throws FileNotFoundException
	 */
	private void readHistory() throws FileNotFoundException{
		history = XMLSerializer.read(historyName);
	}
	
	/**
	 * 
	 * Read history file and task file from the disk to task list.
	 * @param taskIn the ArrayList of the whole task. Must be related to the task ArrayList in taskManager.
	 * @return isReloaded shows whether this is first time run or reload from previous record
	 */
	
	public boolean prepareFile(ArrayList<Task> taskIn) throws WrongTaskDescriptionStringException {
		tasks = taskIn;
		boolean isReloaded = true;
		try {
			File file = new File(fileName);
			if (!file.exists()) {
				saveHistory();
				file.createNewFile();
				isReloaded=false;
			} else {
				BufferedReader iptBuff = new BufferedReader(new FileReader(
						fileName));
				String temp = iptBuff.readLine();
				while (temp != null) {
					//read line by line
					Task nextTask = stringToTask(temp);
					tasks.add(nextTask);
					temp = iptBuff.readLine();
				}
				iptBuff.close();
				readHistory();
			}
			return isReloaded;
		} catch (FileNotFoundException e) {
			GUI.print_add(Constants.MESSAGE_NO_HISTORY, 4);
			saveHistory();
			e.printStackTrace();
		} catch (IOException e) {
			GUI.print_add(Constants.MESSAGE_IO_ERROR, 4);
			e.printStackTrace();
		}
		return isReloaded;
	}
		
	/**
	 * Build a FloatingTask
	 * @param input the task description string
	 * @return flt the FloatingTask
	 */
	private FloatingTask buildFloatingTask(String input){
		int bound = input.indexOf("#");
		FloatingTask flt = new FloatingTask(input.substring(0, bound));
		if(input.substring(bound+1).equals("true")){
			flt.setComplete(true);
		}
		return flt;
	}
	
	/**
	 * Build a Deadline Task
	 * @param input the task description string
	 * @return ddt the DeadlineTask
	 */
	private DeadlineTask buildDeadlineTask(String input){
		int bound = input.indexOf("#");
		String descrbtion = input.substring(0, bound);
		input=input.substring(bound+1);
		bound = input.indexOf("#");
		String dateAndTime =  input.substring(0, bound);
		String finished = input.substring(bound+1);
		ArrayList<DateTime> dateTimes = 
		        InputParser.parseDateTime("fake 'fake' " + dateAndTime,
		                                  COMMAND_TYPE.INVALID);
		DeadlineTask ddt = new DeadlineTask(descrbtion, dateTimes);
		if(finished.equals("true")){
			ddt.setComplete(true);
		}
		return ddt;
	}
	
	/**
	 * Build a TimedTask
	 * @param input the task description string
	 * @return tmt the TimedTask
	 */
	private TimedTask buildTimedTask(String input){
		int bound = input.indexOf("#");
		String descrbtion = input.substring(0, bound);
		input=input.substring(bound+1);
		bound = input.indexOf("#");
		String dateAndTime =  input.substring(0, bound);
		String finished = input.substring(bound+1);
		ArrayList<DateTime> dateTimes =
		        InputParser.parseDateTime("fake 'fake' "+ dateAndTime,
		                                  COMMAND_TYPE.INVALID);
		TimedTask tmt = new TimedTask(descrbtion, dateTimes );
		if(finished.equals("true")){
			tmt.setComplete(true);
		}
		return tmt;
	}
	
	/**
	 * Convert one String into one Task
	 * @param input String which describes the task
	 * @return Task described by the  String
	 * @throws WrongTaskDescriptionStringException 
	 */	
	private Task stringToTask(String input) throws WrongTaskDescriptionStringException{
		int bound = input.indexOf("#");
		String taskKind = input.substring(0, bound);
		String next = input.substring(bound+1);
		if(taskKind.equals("floating")){
			return buildFloatingTask(next);
		}else if(taskKind.equals("DEADLINE")){
			return buildDeadlineTask(next);
		}else if(taskKind.equals("TIMED")){
			return buildTimedTask(next);
		}else{
			throw(new WrongTaskDescriptionStringException("Task description string error: no such kind of task."));
		}
	}
	
	/**
	 * Convert a list of Strings into a list of Tasks
	 * @param str ArrayList<String> which describes the tasks
	 * @return tasks ArrayList<Task> described by the  Strings
	 * @throws WrongTaskDescriptionStringException 
	 */	
	private ArrayList<Task> stringsToTasks(ArrayList<String> str) throws WrongTaskDescriptionStringException{
		ArrayList<Task> tasks = new ArrayList<Task>();
		for(String i: str){
			tasks.add(stringToTask(i));
		}
		return tasks;
	}
	
	/**
	 * Convert a list of Tasks into a list of Strings
	 * @param tasks ArrayList<Task> described by the  Strings
	 * @return toReturn ArrayList<String> which describes the tasks
	 */	
	private ArrayList<String> tasksToStrings(ArrayList<Task> tasks){
		ArrayList<String> toReturn = new ArrayList<String>();
		
		for(int i=0;i<tasks.size();i++){
			toReturn.add(tasks.get(i).toStringForFile());
		}
		return toReturn;
	}
	
	/**
	 * Write history records (undo) to the disk.
	 * @throws FileNotFoundException
	 */	
	private void saveHistory(){
			try {
				XMLSerializer.write(history, historyName);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	/**
	 * Save all the tasks and undo-history(optional) into the disc
	 * 
	 * @param  saveHistory Boolean save the history or not
	 * @throws IOException 
	 */	
	public void save(Boolean saveHistory) throws IOException {
		File file = new File(fileName);
		
		BufferedWriter output = new BufferedWriter(new FileWriter(file, false));
		//Save line by line
		
		for (int i = 0; i < tasks.size(); i++) {
			output.write((tasks.get(i)).toStringForFile()+"\n");
		}
		history_redo.clear();
		if(saveHistory){
		history.add(tasksToStrings(tasks));
		saveHistory();
		}
		output.close();
	}
	
	/**
	 * Undo returns the last change made by the user.
	 * It will be saved after user exit sudo
	 * @return tasks ArrayList<Task> the result of undo
	 * @throws NoHistoryException
	 * @throws FileNotFoundException 
	 * @throws WrongTaskDescriptionStringException 
	 */	
	public ArrayList<Task> undo() throws NoHistoryException, FileNotFoundException, WrongTaskDescriptionStringException{

		if(history.size()>1){
			history_redo.add(tasksToStrings(tasks));
			history.remove(history.size()-1);
			tasks = stringsToTasks(history.get(history.size()-1));
			saveHistory();
		return tasks;
		}else{
			throw new NoHistoryException("Can not undo anymore.");
		}
	}
	/**
	 * Redo returns the change before undo made by the user.
	 * It will not be saved after user exit
	 * @return tasks ArrayList<Task> the result of redo
	 * @throws NoHistoryException
	 * @throws FileNotFoundException 
	 * @throws WrongTaskDescriptionStringException 
	 */	
	public ArrayList<Task> redo() throws NoHistoryException, FileNotFoundException, WrongTaskDescriptionStringException{
		if(history_redo.size()>0){
			tasks = stringsToTasks(history_redo.get(history_redo.size()-1));
			history.add(tasksToStrings(tasks));
			history_redo.remove(history_redo.size()-1);
			saveHistory();
		return tasks;
		}else{
			throw new NoHistoryException("Can not redo anymore.");
		}
	}
}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\StorageHandler.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\StorageHandlerTest.java
	 */

package sg.edu.nus.cs2103.sudo.storage;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

import sg.edu.nus.cs2103.sudo.COMMAND_TYPE;
import sg.edu.nus.cs2103.sudo.Constants;
import sg.edu.nus.cs2103.sudo.logic.DeadlineTask;
import sg.edu.nus.cs2103.sudo.logic.FloatingTask;
import sg.edu.nus.cs2103.sudo.logic.InputParser;
import sg.edu.nus.cs2103.sudo.logic.Task;
import sg.edu.nus.cs2103.sudo.logic.TimedTask;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class StorageHandlerTest {

	private static ArrayList<Task> tasks = new ArrayList<Task>();
	private static StorageHandler storage;
	private static final String TEST_NAME = "Test.sav";
	private static final String TEST_HISTORY_NAME = "Test.his";
	

	private File file;
	private File historyFile;
	
	private final static String userInput1 = "add 'Sleeping' from october 14th 1am to 7am";
	private final static String userInput2 = "add 'Kanji Homework'";
	private final static String userInput3 = "add 'Tutorial' from october 14th 6pm to 7pm";
	private final static String userInput4 = "add 'CS2100 Tutorial' from october 14th 1pm to 2 pm";
	private final static String userInput5 = "add 'Japanese Tutorial A' from october 14th 2pm to 4pm";
	private final static String userInput6 = "add 'Have Dinner With A Friend'";
	private final static String userInput7 = "add 'Study' by 11pm oct 14th";
	

	@Before
	public void setUp() {
		file = new File(TEST_NAME);
		historyFile = new File(TEST_HISTORY_NAME);
    }
	
	@After
    public void tearDown() {
		file.delete();
		historyFile.delete();
		tasks.clear();
    }
	
	
	@Test
	public void initializationTest() throws Exception {
		storage = StorageHandler.getStorageHandler(TEST_NAME,TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		assertEquals(true, file.exists());
		assertEquals(true, historyFile.exists());
	}
	
	@Test
	public void writeTest() throws Exception {
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		String taskDescription = InputParser.parseDescription(userInput1);
		ArrayList<DateTime> dates = InputParser.parseDateTime(userInput1, COMMAND_TYPE.ADD);
		TimedTask timed = new TimedTask(taskDescription, dates);
		tasks.add(timed);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput2);
		FloatingTask dead = new FloatingTask(taskDescription);
		tasks.add(dead);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput3);
		dates = InputParser.parseDateTime(userInput3, COMMAND_TYPE.ADD);
		TimedTask timed2 = new TimedTask(taskDescription, dates);
		tasks.add(timed2);
		storage.save(true);
		StorageHandler.resetStorageHandler();
		assertEquals(true, file.exists());
		assertEquals(true, historyFile.exists());
		BufferedReader iptBuff = new BufferedReader(new FileReader(
				TEST_NAME));  	 	 	
		String temp = iptBuff.readLine();
		assertEquals("TIMED#Sleeping#2013-10-14T01:00 to 2013-10-14T07:00#false", temp);
		temp = iptBuff.readLine();
		assertEquals("floating#Kanji Homework#false", temp);
		temp = iptBuff.readLine();
		assertEquals("TIMED#Tutorial#2013-10-14T18:00 to 2013-10-14T19:00#false", temp);
		iptBuff.close();
		
	}
	
	@Test
	public void readTest() throws Exception {
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		String taskDescription = InputParser.parseDescription(userInput4);
		ArrayList<DateTime> dates = InputParser.parseDateTime(userInput4, COMMAND_TYPE.ADD);
		TimedTask timed = new TimedTask(taskDescription, dates);
		tasks.add(timed);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput5);
		dates = InputParser.parseDateTime(userInput5, COMMAND_TYPE.ADD);
		TimedTask timed2 = new TimedTask(taskDescription, dates);
		tasks.add(timed2);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput6);
		FloatingTask floating = new FloatingTask(taskDescription);
		tasks.add(floating);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput7);
		ArrayList<DateTime> dates2 = InputParser.parseDateTime(userInput7, COMMAND_TYPE.ADD);
		DeadlineTask dead = new DeadlineTask(taskDescription, dates2);
		tasks.add(dead);
		storage.save(true);
		StorageHandler.resetStorageHandler();
		assertEquals(true, file.exists());
		assertEquals(true, historyFile.exists());
		
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		assertEquals("TIMED#CS2100 Tutorial#2013-10-14T13:00 to 2013-10-14T14:00#false", tasks.get(0).toStringForFile());
		assertEquals("TIMED#Japanese Tutorial A#2013-10-14T14:00 to 2013-10-14T16:00#false", tasks.get(1).toStringForFile());
		assertEquals("floating#Have Dinner With A Friend#false", tasks.get(2).toStringForFile());
		//assertEquals("DEADLINE#Study#2013-10-14T23:00#false", tasks.get(3).toStringForFile());
	}
	
	@Test
	public void historyTest() throws Exception {
		storage.resetStorageHandler();
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		String taskDescription = InputParser.parseDescription(userInput4);
		ArrayList<DateTime> dates = InputParser.parseDateTime(userInput4, COMMAND_TYPE.ADD);
		TimedTask timed = new TimedTask(taskDescription, dates);
		tasks.add(timed);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput5);
		dates = InputParser.parseDateTime(userInput5, COMMAND_TYPE.ADD);
		TimedTask timed2 = new TimedTask(taskDescription, dates);
		tasks.add(timed2);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput6);
		FloatingTask floating = new FloatingTask(taskDescription);
		tasks.add(floating);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput7);
		dates = InputParser.parseDateTime(userInput7, COMMAND_TYPE.ADD);
		DeadlineTask dead = new DeadlineTask(taskDescription, dates);
		tasks.add(dead);
		storage.save(true);
		taskDescription = InputParser.parseDescription(userInput1);
		dates = InputParser.parseDateTime(userInput1, COMMAND_TYPE.ADD);
		TimedTask timed3 = new TimedTask(taskDescription, dates);
		tasks.add(timed3);
		storage.save(true);
		tasks=(ArrayList<Task>) storage.undo().clone();
		tasks=(ArrayList<Task>) storage.undo().clone();
		tasks=(ArrayList<Task>) storage.redo().clone();
		storage.save(false);
		StorageHandler.resetStorageHandler();
		tasks.clear();
		assertEquals(true, file.exists());
		assertEquals(true, historyFile.exists());
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		assertEquals("TIMED#CS2100 Tutorial#2013-10-14T13:00 to 2013-10-14T14:00#false", tasks.get(0).toStringForFile());
		assertEquals("TIMED#Japanese Tutorial A#2013-10-14T14:00 to 2013-10-14T16:00#false", tasks.get(1).toStringForFile());
		assertEquals("floating#Have Dinner With A Friend#false", tasks.get(2).toStringForFile());
		assertEquals("DEADLINE#Study#2013-10-14T23:00#false", tasks.get(3).toStringForFile());
		assertEquals(4, tasks.size());
		tasks.clear();
		StorageHandler.resetStorageHandler();
		assertEquals(true, file.exists());
		assertEquals(true, historyFile.exists());
		storage = StorageHandler.getStorageHandler(TEST_NAME, TEST_HISTORY_NAME);
		storage.prepareFile(tasks);
		tasks=(ArrayList<Task>) storage.undo().clone();
		tasks=(ArrayList<Task>) storage.undo().clone();
		storage.save(false);
		assertEquals("TIMED#CS2100 Tutorial#2013-10-14T13:00 to 2013-10-14T14:00#false", tasks.get(0).toStringForFile());
		assertEquals("TIMED#Japanese Tutorial A#2013-10-14T14:00 to 2013-10-14T16:00#false", tasks.get(1).toStringForFile());
		assertEquals(2, tasks.size());
		tasks=(ArrayList<Task>) storage.undo().clone();
		tasks=(ArrayList<Task>) storage.undo().clone();
		assertEquals(true, tasks.isEmpty());
		tasks=(ArrayList<Task>) storage.redo().clone();
		assertEquals("TIMED#CS2100 Tutorial#2013-10-14T13:00 to 2013-10-14T14:00#false", tasks.get(0).toStringForFile());
	}
	
}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\StorageHandlerTest.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\XMLSerializer.java
	 */

package sg.edu.nus.cs2103.sudo.storage;

import java.beans.XMLEncoder;
import java.beans.XMLDecoder;
import java.io.*;
import java.util.ArrayList;

public class XMLSerializer {
    public static void write(ArrayList<ArrayList<String>> h, String name) throws FileNotFoundException{
        XMLEncoder encoder =
           new XMLEncoder(
              new BufferedOutputStream(
                new FileOutputStream(name)));
        encoder.writeObject(h);
        encoder.close();
    }

    public static ArrayList<ArrayList<String>> read(String filename) throws FileNotFoundException {
        XMLDecoder decoder =
            new XMLDecoder(new BufferedInputStream(
                new FileInputStream(filename)));
        ArrayList<ArrayList<String>> h = (ArrayList<ArrayList<String>>) decoder.readObject();
        decoder.close();
        return h;
    }
}
	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\sudo\storage\XMLSerializer.java





	/**
	 * origin: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\ui\GUI.java
	 */

 */

public class GUI extends javax.swing.JFrame implements NativeKeyListener {

	private int currentKey;
	private Boolean TABPressed = false;
	private Boolean SpacePressed = false;
	private Boolean isVisibleGUI = true;
	private TaskManager manager;
	private LogicHandler logicHandler;
	private javax.swing.JTextArea FloatingTextArea;
	private javax.swing.JScrollPane jScrollPaneMainText;
	private javax.swing.JScrollPane jScrollPaneFloating;
	private javax.swing.JScrollPane jScrollPaneLogo;
	private javax.swing.JScrollPane jScrollPaneInput;
	private javax.swing.JTextField SudoTextPaneInput;
	private javax.swing.JTextArea jTextAreaLogo;
	private ArrayList<String> previousInput;
	private int previousInputPointer;
	
	/**
	 * SudoTextPane extends JTestPane, which provides a background picture 
	 * hold by JScrollPane
	 */
	private static class SudoTextPane extends JTextPane {
		public SudoTextPane() {
			super();
			setOpaque(false);
			setBackground(Color.BLACK);
		}

		@Override
		protected void paintComponent(Graphics g) {
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, getWidth(), getHeight());

			BufferedImage img = null;
			try {
				img = ImageIO
						.read(GUI.class.getClassLoader().getResource(GUIConstants.BACKGROUND_IMAGE_NAME));
			} catch (IOException e) {
			}
			g.drawImage(img, 0, 0, this);

			super.paintComponent(g);
		}
	}

	/**
	 * The following code creates new GUI. MainTextPane is the main text
	 * displaying area which is static so that other static objects can call it.
	 */
	static public SudoTextPane MainTextPane = new SudoTextPane();

	/**
	 * StyledDocument stores all text layouts for MainTextPane.
	 */
	static public StyledDocument styledDoc = MainTextPane.getStyledDocument();

	/**
	 * print_add is for logic part to send display message(string and color
	 * code) to GUI.
	 */
	static public String print_add(String ipt, int colorCode) {
		System.out.print(ipt);
		switch (colorCode) {
		case GUIConstants.COLOR_CODE_GREEN:
			useStyle(styledDoc, ipt, "Green");
			return ipt;
		case GUIConstants.COLOR_CODE_YELLOW:
			useStyle(styledDoc, ipt, "Yellow");
			return ipt;
		case GUIConstants.COLOR_CODE_BLUE:
			useStyle(styledDoc, ipt, "Blue");
			return ipt;
		case GUIConstants.COLOR_CODE_RED:
			useStyle(styledDoc, ipt, "Red");
			return ipt;
		case GUIConstants.COLOR_CODE_WHITE:
			useStyle(styledDoc, ipt, "White");
			return ipt;
		default:
			useStyle(styledDoc, ipt, "Green");
			return ipt;
		}
	}

	public static void addNewStyle(String style, StyledDocument doc, int size,
			int bold, int italic, Color color, String fontName) {
		doc.removeStyle(style);// clean the style if exist
		Style s = doc.addStyle(style, null); // add
		StyleConstants.setFontSize(s, size); // size
		StyleConstants.setBold(s, (bold == 1) ? true : false); // bold
		StyleConstants.setItalic(s, (italic == 1) ? true : false); // italian
		StyleConstants.setForeground(s, color); // color
		StyleConstants.setFontFamily(s, fontName); // font
	}

	public static void useStyle(StyledDocument styledDoc, String content,
			String currentStyle) {
		try {
			styledDoc.insertString(styledDoc.getLength(), content,
					styledDoc.getStyle(currentStyle));
		} catch (BadLocationException e) {
			System.err.println("BadLocationException: " + e);
		}
	}

	/**
	 * rebuildStyle resets all styles for styledDoc.
	 */
	private void rebuildStyle() {
		try {
			styledDoc.remove(0, styledDoc.getLength());
			// Remove default style if anything exists in styledDoc
		} catch (BadLocationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		StyledDocument styledDoc = MainTextPane.getStyledDocument();
		//main text
		addNewStyle("Green", styledDoc, 18, 1, 0, Color.GREEN, "OCR A Std");
		//labels
		addNewStyle("Yellow", styledDoc, 18, 1, 0, new Color(254, 254, 125),
				"OCR A Std");
		// command feedback
		addNewStyle("Blue", styledDoc, 18, 1, 1, new java.awt.Color(145, 192,
				246), "OCR A Std");
		// Error
		addNewStyle("Red", styledDoc, 18, 1, 0, new java.awt.Color(254, 100,
				100), "OCR A Std");
		//IDs and highlited texts
		addNewStyle("White", styledDoc, 18, 1, 1, Color.WHITE, "OCR A Std");
	}

	/**
	 * GUI class builder. Initialize logicHandler, build text styles, then
	 * initialize GUI components.
	 */
	public GUI() {
		manager = TaskManager.getTaskManager(Constants.FILE_NAME,
				Constants.HISTORY_NAME);
		logicHandler = LogicHandler.getLogicHandler(manager, null);
		rebuildStyle();
		initComponents();
		this.setVisible(true);
	}

	/**
	 * jNativeHook provides global keyboard listener for shortcut key.
	 */
	public void nativeKeyTyped(NativeKeyEvent arg0) {
		// .TODO Auto-generated method stub
		// To implement unimplemented method
	}

	/** Detect whether TAB and Space are both pressed. If so then change
	* visibility of GUI
	*/
	public void nativeKeyPressed(NativeKeyEvent e) {
		currentKey = e.getKeyCode();
		if (currentKey == GUIConstants.KEYBOARD_TAB) {
			TABPressed = true;
		}
		if (currentKey == GUIConstants.KEYBOARD_SPACE) {
			SpacePressed = true;
		}
		if (TABPressed && SpacePressed) {
			if (isVisibleGUI) {
				isVisibleGUI = false;
				toInvisible();
			} else {
				isVisibleGUI = true;
				toVisible();
			}
		}
		if (e.getKeyCode() == NativeKeyEvent.VK_ESCAPE) {
			GlobalScreen.unregisterNativeHook();
			System.exit(0);
		}
	}

	// If TAB or Space is released then change state of TABPressed and
	// SpacePressed
	public void nativeKeyReleased(NativeKeyEvent e) {
		currentKey = e.getKeyCode();
		if (currentKey == GUIConstants.KEYBOARD_TAB) {
			TABPressed = false;
		}
		if (currentKey == GUIConstants.KEYBOARD_SPACE) {
			SpacePressed = false;
		}
	}

	// Visibility
	public void toInvisible() {
		this.setState(Frame.ICONIFIED);
	}

	public void toVisible() {
		this.setState(Frame.NORMAL);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		// Initialize all GUI components
		jScrollPaneInput = new javax.swing.JScrollPane();
		SudoTextPaneInput = new javax.swing.JTextField();
		jTextAreaLogo = new javax.swing.JTextArea();
		jScrollPaneMainText = new javax.swing.JScrollPane();
		jScrollPaneFloating = new javax.swing.JScrollPane();
		jScrollPaneLogo = new javax.swing.JScrollPane(
				JScrollPane.VERTICAL_SCROLLBAR_NEVER,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);//Scrollbar invisible
		FloatingTextArea = new javax.swing.JTextArea();

		// previous command
		previousInput = new ArrayList<String>();

		// Set caret for FloatingTextArea to ALWAYS_UPDATE
		DefaultCaret caret = (DefaultCaret) FloatingTextArea.getCaret();
		caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		// KeyListeners for keyboard actions
		SudoTextPaneInput.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				// previous command
				if (e.getKeyCode() == KeyEvent.VK_UP
						&& previousInputPointer >= 0) {
					previousInputPointer--;
					SudoTextPaneInput.setText(previousInput
							.get(previousInputPointer + 1));
				}
				// "next" command
				if (e.getKeyCode() == KeyEvent.VK_DOWN
						&& previousInputPointer < previousInput.size() - 1) {
					previousInputPointer++;
					SudoTextPaneInput.setText(previousInput
							.get(previousInputPointer));
				}
				// execute
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					String ipt = SudoTextPaneInput.getText();
					if (!ipt.equals("")) {
						previousInput.add(ipt);
						previousInputPointer = previousInput.size() - 1;
						rebuildStyle();
						String userInput = SudoTextPaneInput.getText();
						SudoTextPaneInput.setText(null);
						logicHandler.executeCommand(userInput);
						try {
							FloatingTextArea.setText("Floating tasks:\n\n"
									+ manager.displayFloatingTasks());
						} catch (IllegalStateException w) {
							FloatingTextArea
									.setText(Constants.MESSAGE_EMPTY_LIST);
						}
					}

				}

				// Add color change code here

			}

		});

		// GUI components properties and behavior
		jScrollPaneInput.setViewportView(SudoTextPaneInput);
		MainTextPane.setEditable(false);
		MainTextPane.setBackground(Color.BLACK);
		MainTextPane.setAutoscrolls(false);
		MainTextPane.setDragEnabled(false);
		MainTextPane.setFocusable(false);
		((DefaultCaret) MainTextPane.getCaret())
				.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
		jScrollPaneMainText.setViewportView(MainTextPane);
		FloatingTextArea.setEditable(false);
		FloatingTextArea.setColumns(20);
		FloatingTextArea.setRows(5);
		FloatingTextArea.setDragEnabled(false);
		FloatingTextArea.setFocusable(false);
		FloatingTextArea.setFont(new java.awt.Font("Courier", 0, 14));
		FloatingTextArea.setBackground(Color.BLACK);
		FloatingTextArea.setForeground(Color.GREEN);
		jScrollPaneFloating.setViewportView(FloatingTextArea);
		jTextAreaLogo.setEditable(false);
		jTextAreaLogo.setBackground(new java.awt.Color(0, 0, 0));
		jTextAreaLogo.setForeground(Color.GREEN);
		jTextAreaLogo.setColumns(20);
		jTextAreaLogo.setRows(5);
		jTextAreaLogo.setFocusable(false);
		jScrollPaneLogo.setViewportView(jTextAreaLogo);
		jTextAreaLogo.setText(GUIConstants.LOGO);
		jTextAreaLogo.setFont(new java.awt.Font("Courier", 1, 13));

		// Welcome message
		if (manager.isReloaded()) {
			GUI.print_add((Constants.MESSAGE_WELCOME_TO_SUDO_RELOAD_A),
					GUIConstants.COLOR_CODE_GREEN);
			GUI.print_add((Constants.MESSAGE_WELCOME_TO_SUDO_RELOAD_B),
					GUIConstants.COLOR_CODE_WHITE);
			// GUI.print_add((UIConstants.MESSAGE_BETTER_ON_MAC),4);
		} else {
			GUI.print_add((Constants.MESSAGE_WELCOME_TO_SUDO_FIRST_A),
					GUIConstants.COLOR_CODE_GREEN);
			GUI.print_add((Constants.MESSAGE_WELCOME_TO_SUDO_FIRST_B),
					GUIConstants.COLOR_CODE_WHITE);
		}

		// Floating task area
		try {
			FloatingTextArea.setText("Floating tasks:\n\n"
					+ manager.displayFloatingTasks());
		} catch (IllegalStateException e) {
			FloatingTextArea.setText(e.getMessage());
		}

		// Layout setup - do not modify
		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPaneInput)
				.add(layout
						.createSequentialGroup()
						.add(jScrollPaneMainText,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								940,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										jScrollPaneFloating,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										250,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										jScrollPaneLogo,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										250,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))));
		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING,
						layout.createSequentialGroup()
								.add(layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jScrollPaneMainText)
										.add(layout
												.createSequentialGroup()
												.add(jScrollPaneLogo,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														121, Short.MAX_VALUE)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(jScrollPaneFloating,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														579,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jScrollPaneInput,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
		pack();
	}

	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			GlobalScreen.registerNativeHook();
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (NativeHookException ex) {
			System.err
					.println("There was a problem registering the native hook.");
			System.err.println(ex.getMessage());
			System.exit(1);
		}
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				GlobalScreen.getInstance().addNativeKeyListener(new GUI());
			}
		});
	}
}

	// End of segment: C:\Users\Sony\workspace\sudo\src\sg\edu\nus\cs2103\ui\GUI.java





